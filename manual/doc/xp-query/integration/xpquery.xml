<chapter id="xp_query_integration_xpquery">
	<title>XPQuery</title>
	<para>
		<![CDATA[프리젠테이션 레이어 개발 시 X-Internet 제품인 XPlatform 또는 MiPlatform 등을 기반으로 할 경우 각 제품은 사용자
		입력 사항을 제품 고유의 데이터 형태에 저장하여 전달한다. 따라서 Query 서비스를 이용하여 DB 데이터를 처리하기
		위해서는 "제품 고유의 데이터 전달 형태 <-> Map 또는 VO 간의 변환"을 위한 추가 작업이 필요하며, 이로 인해 대량의
		데이터를 다루는 경우 성능 저하가 발생할 가능성이 크다. Query 서비스에서는 기본 QueryService를 확장하여,
		특정 X-Internet 제품에 최적화된 형태의 구현체를 제공함으로써 개발 편의성과 응답 속도 향상을 도모하고자 한다.
		다음에서는 XPlatform에 최적화된 XPQueryService 사용 방법에 대해서 살펴보도록 한다.]]> 
	</para>
	
	<section id="xp_query_integration_xpquery_xpqueryservice">
		<title>XPQueryService 활용</title>

		<para>
			XPQueryService는 XPlatform 고유의 데이터 전달 형태로부터 사용자가 입력한 데이터를 추출하여 해당 DB에 반영하는 
			역할을 수행한다. 그러므로 투비소프트사의 X-Internet 제품인 XPlatform 기반으로 프리젠테이션 레이어를 개발하는 경우, 
			XPQueryService를 통해 XPlatform 고유의 데이터 전달 형태인 	com.tobesoft.xplatform.data.DataSet, 
			com.tobesoft.xplatform.data.VariableList를 그대로 이용할 수 있게 된다.
		</para>
			
		<important>
			<title>Pagination시 유의 사항</title>
			<para>
				PagingJdbcTemplate 속성 정의시에는 반드시 DBMS에 적합한 PagingSQLGenerator를 셋팅해 주어야 한다.
				적절한 PagingSQLGenerator가 존재하지 않는 경우에는 QueryService에서 제공하는 org.anyframe.query.impl.jdbc.generator.DefaultPagingSQLGenerator를
				사용할 수 있으나, DefaultPagingSQLGenerator를 이용하여 findXXX() 메소드를 실행하면 QueryService 내부적으로
				조건에 해당하는 모든 데이터를 fetch한 이후 ResultSet Cursor의 위치를 이동시키는 방식으로 특정 페이지에 속한 데이터를
				걸러낸다. 이 때 ResultSet Cursor를 움직이는 로직에서 상당한 시간이 소요되어 다량의 데이터 조회시 성능에 심각한 영향을 
				끼칠 수 있다. 따라서, DefaultPagingSQLGenerator 사용은 권장하지 않는다.
			</para>
		</important>			

		<section id="xp_query_integration_xpquery_xpqueryservice_attribute">
			<title>XPQueryService 속성 정의 파일 Sample</title>

			<para>
				다음은 XPQueryService를 정의한 context-xp-query.xml 파일의 일부이다. XPQueryService는 내부적으로 
				RiaQueryService를 통해 데이터 접근 처리를 수행하므로 RiaQueryService에 대한 참조 관계 설정이 필요하다.
				<programlisting language="xml"><![CDATA[<bean id="xpQueryService" class="org.anyframe.xp.query.impl.XPQueryServiceImpl">
	<property name="namedParamJdbcTemplate" ref="pagingNamedParamJdbcTemplate"/>
	<property name="lobHandler" ref="lobHandler"/>
	<property name="sqlRepository" ref="sqlLoader"/>
	<lookup-method name="getRowCallbackHandler" bean="rowCallbackHandler"/>
	<lookup-method name="getCallableStatementCallbackHandler" bean="callableStatementCallbackHandler"/>
	<lookup-method name="getPrintWriterRowCallbackHandler" bean="printWriterRowCallbackHandler"/>
</bean>	

<bean id="callableStatementCallbackHandler" class="org.anyframe.xp.query.impl.jdbc.mapper.XPCallableStatementCallbackHandler" scope="prototype"/>

<bean id="rowCallbackHandler" class="org.anyframe.xp.query.impl.jdbc.mapper.XPDataSetCallbackHandler" scope="prototype"/>

<bean id="printWriterRowCallbackHandler" class="org.anyframe.xp.query.impl.jdbc.mapper.XPPrintWriterCallbackHandler" scope="prototype"/>
 
<!-- The original JdbcTemplate definition -->
<bean id="pagingNamedParamJdbcTemplate" class="org.anyframe.query.impl.jdbc.PagingNamedParamJdbcTemplate">
	<constructor-arg index="0" ref="pagingJdbcTemplate"/>
 <constructor-arg index="1" ref="dataSource"/>
</bean> 

<bean id="pagingJdbcTemplate" class="org.anyframe.query.impl.jdbc.PagingJdbcTemplate">
 <constructor-arg ref="dataSource"/>
 <property name="exceptionTranslator" ref="exceptionTranslator"/>
    <property name="paginationSQLGetter" ref="pagingSQLGenerator"/>
</bean>

<bean id="pagingSQLGenerator" class="org.anyframe.query.impl.jdbc.generator.OraclePagingSQLGenerator"/>]]></programlisting>
			</para>
		</section>

		<section id="xp_query_integration_xpquery_xpqueryservice_xml">
			<title>매핑 XML 파일 샘플</title>

			<para>
				다음은 앞서 정의한 XPQueryService가 참조하는 RiaQueryService Bean을 통해 로드된 mapping-xp-query-movie.xml 
				파일의 일부로, Named Parameter를 이용한 쿼리문들을 포함하고 있다.
				<programlisting language="xml"><![CDATA[<queries>
<query id="createMovie" isDynamic="true" mappingStyle="upper">
	<statement>
		INSERT INTO 
		MOVIE (MOVIE_ID, TITLE, DIRECTOR, GENRE_ID, ACTORS, RUNTIME, RELEASE_DATE, TICKET_PRICE, NOW_PLAYING, POSTER_FILE)
		VALUES (:MOVIE_ID, :TITLE, :DIRECTOR, :GENRE_ID, :ACTORS, :RUNTIME, :RELEASE_DATE, :TICKET_PRICE, :NOW_PLAYING, :POSTER_FILE)
	</statement>
</query>

<query id="updateMovie" isDynamic="true" mappingStyle="upper">
	<statement>
		UPDATE MOVIE
		SET 
			TITLE = :TITLE, 
			DIRECTOR = :DIRECTOR,
			GENRE_ID = :GENRE_ID, 
			ACTORS = :ACTORS, 
			RUNTIME = :RUNTIME, 
			RELEASE_DATE = :RELEASE_DATE,   
			TICKET_PRICE = :TICKET_PRICE, 
			NOW_PLAYING = :NOW_PLAYING
		WHERE
			MOVIE_ID = :MOVIE_ID
	</statement>
</query>

<query id="removeMovie" isDynamic="true" mappingStyle="upper">
	<statement>
		DELETE FROM MOVIE 
		WHERE 
			MOVIE_ID = :MOVIE_ID
	</statement>
</query>

<query id="findMovieByPk" isDynamic="true" mappingStyle="upper">
	<statement>
		SELECT 
			MOVIE_ID, TITLE, DIRECTOR, GENRE_ID, ACTORS, RUNTIME, RELEASE_DATE, TICKET_PRICE, NOW_PLAYING, POSTER_FILE
		FROM MOVIE
		WHERE 
			MOVIE_ID = :MOVIE_ID
	</statement>
</query>

<query id="findMovieList" isDynamic="true" mappingStyle="upper">
	<statement>
		SELECT 
			MOVIE_ID, TITLE, DIRECTOR, GENRE_ID, ACTORS, RUNTIME, RELEASE_DATE, TICKET_PRICE, NOW_PLAYING, POSTER_FILE
		FROM MOVIE
		WHERE 		
			TITLE like '%' || :SEARCH_TITLE || '%'
			AND	NOW_PLAYING = :SEARCH_NOW_PLAYING 
		ORDER BY RELEASE_DATE DESC
	</statement>
</query>]]></programlisting>
			</para>
		</section>

		<section id="xp_query_integration_mipquery_xpqueryservice_testcode">
			<title>테스트 코드 Sample</title>

			<para>
				다음에서는 XPQueryService를 이용하여 앞서 언급한 매핑 XML 파일에 정의된 INSERT, SELECT, UPDATE, DELETE 쿼리문을 
				실행하는 테스트 코드의 일부이다.
				<programlisting language="java">/**
 * XPlatform용 Query 서비스를 통해 DB에 신규 데이터를 입력하는 테스트 코드
 */    
public void insertDataSet() throws Exception {
    XPQueryService xpQueryService = (XPQueryService) context.getBean("xpQueryService");

    Map queryMap = new HashMap();
    queryMap.put(XPQueryService.QUERY_INSERT, "createMovie");

    // INSERT, UPDATE, DELETE 유형별로 사용할 query id를 정의한 Map과 DB에 반영해야 할 
    // Dataset을 전달. Dataset에는 다수의 데이터를 저장할 수 있음.
    int resultInsert =
            <emphasis role="bold">xpQueryService.update(queryMap, makeMovie());</emphasis>
}

/**
 * XPlatform용 Query 서비스를 통해 DB에 입력된 데이터를 수정하는 테스트 코드
 */   
public void updateDataSet() throws Exception {
    XPQueryService xpQueryService =
            (XPQueryService) context.getBean("xpQueryService");

    Map queryMap = new HashMap();
    queryMap.put(XPQueryService.QUERY_UPDATE, "updateMovie");
    
    // INSERT, UPDATE, DELETE 유형별로 사용할 query id를 정의한 Map과 DB에 반영해야 할 
    // Dataset을 전달. Dataset에는 다수의 데이터를 저장할 수 있음.    
    int resultUpdate =
           <emphasis role="bold">xpQueryService.update(queryMap, makeMovie());</emphasis>
}

/**
 * XPlatform용 Query 서비스를 통해 DB에 데이터를 입력/수정/삭제하는 테스트 코드
 */    
public void processAllDataSet() throws Exception {
    XPQueryService xpQueryService =
            (XPQueryService) context.getBean("xpQueryService");

    Map queryMap = new HashMap();
    queryMap.put(XPQueryService.QUERY_UPDATE, "updateMovie");
    queryMap.put(XPQueryService.QUERY_INSERT, "createMovie");
    queryMap.put(XPQueryService.QUERY_DELETE, "removeMovie");
    
    // INSERT, UPDATE, DELETE 유형별로 사용할 query id를 정의한 Map과 DB에 반영해야 할
    // Dataset을 전달. Dataset에는 다수의 데이터를 저장할 수 있음.            
    int resultUpdate = <emphasis role="bold">xpQueryService.update(queryMap, makeMovies());</emphasis>
}

/**
 * XPlatform용 Query 서비스를 통해 DB에 데이터를 입력/수정/삭제하는 테스트 코드
 * 이때, ActionCommand를 통해 전후처리 수행
 */    
public void processAllDataSetWithActionCommand() throws Exception {
    XPQueryService xpQueryService =
            (XPQueryService) context.getBean("xpQueryService");

    Map queryMap = new HashMap();
    queryMap.put(XPQueryService.QUERY_UPDATE, "updateMovie");
    queryMap.put(XPQueryService.QUERY_INSERT, "createMovie");
    queryMap.put(XPQueryService.QUERY_DELETE, "removeMovie");
    
    // INSERT, UPDATE, DELETE 유형별로 사용할 query id를 정의한 Map, DB에 반영해야 할 
    // Dataset, DB에 접근하기 전과 후에 처리해야 할 작업을 정의한 ActionCommand를 전달
    // Dataset에는 다수의 데이터를 저장할 수 있음.     
    int resultUpdate =
            <emphasis role="bold">xpQueryService.update(queryMap, makeMovies(),
            new MoviceActionCommand());</emphasis>
}

/**
 * XPlatform용 Query 서비스를 통해 DB에 데이터를 조회하는 테스트 코드
 * 이때, 검색조건은 VariableList 형태임
 */     
public void findDataSetWithVariant() throws Exception {
    XPQueryService xpQueryService =
            (XPQueryService) context.getBean("xpQueryService");

    // 실행할 query id와 VariableList 형태의 검색 조건을 전달
    Dataset resultDataSet =
            <emphasis role="bold">xpQueryService.search("findMovieByPk", makeVariantList());</emphasis>
}

/**
 * XPlatform용 Query 서비스를 통해 DB에 데이터를 조회하는 테스트 코드
 * 이때, 검색조건은 Dataset 형태임
 */    
public void findListDataSet(int expected) throws Exception {
    XPQueryService xpQueryService =
            (XPQueryService) context.getBean("xpQueryService");
    
    // 실행할 query id와 Dataset 형태의 검색 조건을 전달    
    Dataset resultDataSet =
            <emphasis role="bold">xpQueryService.search("findMovieList",
            makeSearchCondition());</emphasis>
}</programlisting>
			</para>

			<para>
				위 소스 코드 중 testProcessAllDataSetWithActionCommand() 메소드에서는 ActionCommand를 이용하여 
				DB에 데이터를 입력하기 전에 특정 칼럼의 값을 변경하고 있다. 이와 같이 XPQueryService는 
				org.anyframe.core.query.ria.mip.MiPActionCommand를 구현한 별도 ActionCommand를 인자로 함께 전달하는 경우 
				입력 데이터를 DB에 반영하기 전/후에 대한 공통 처리를 수행할 수 있도록 지원한다. 예를 들어 입력받은 개별 Row를 DB에 
				신규 등록하기 전에 신규 식별자 값이 셋팅되어야 한다면, Loop을 돌면서 각 Row를 추출한 뒤 식별자를 셋팅하는 별도 로직없이 
				preInsert() 로직 내에 식별자 생성 구문이 추가된 ActionCommand 객체만 전달하면 되는 것이다.
			</para>
		</section>
	</section>
</chapter>
